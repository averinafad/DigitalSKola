{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-21T06:42:08.018Z",
    "end": "2025-04-21T06:42:24.041Z",
    "duration": 16023,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3a2a327f-f550-4781-a4f2-1cbfe8c32bd9",
      "title": "",
      "fullFile": "C:\\Users\\averi\\OneDrive\\Documents\\Mini Boothcamp Digital Skola_QA Engineer\\DigitalSKola\\Web UI Automation_Averina\\Test_Sesi9\\sesi9.test.js",
      "file": "\\Test_Sesi9\\sesi9.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88c9ff88-3fe5-4c0f-99e2-0a2a2f26ac57",
          "title": "Sauce Demo Test",
          "fullFile": "C:\\Users\\averi\\OneDrive\\Documents\\Mini Boothcamp Digital Skola_QA Engineer\\DigitalSKola\\Web UI Automation_Averina\\Test_Sesi9\\sesi9.test.js",
          "file": "\\Test_Sesi9\\sesi9.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Sauce Demo Test\"",
              "fullTitle": "Sauce Demo Test \"before all\" hook in \"Sauce Demo Test\"",
              "timedOut": false,
              "duration": 1279,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`Ini mulai buka web saucedemo:)`)\n//kalau pakai chrome\noptions = new chrome.Options();\noptions.addArguments(\"--headless\");\n// driver = await new Builder(). forBrowser('chrome').build();\ndriver = await new Builder(). forBrowser('chrome').setChromeOptions(options).build();\n// //kalau pakai firefox\n// options = new firefox.Options();\n// options.addArguments(\"--headless\");\n// // driver = await new Builder(). forBrowser('firefox').build();\n// driver = await new Builder(). forBrowser('firefox').setFirefoxOptions(options).build();\nawait driver.get('https://www.saucedemo.com');",
              "err": {},
              "uuid": "e8910411-69cf-4f72-b3e0-1032313da7c8",
              "parentUUID": "88c9ff88-3fe5-4c0f-99e2-0a2a2f26ac57",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Sauce Demo Test\"",
              "fullTitle": "Sauce Demo Test \"after all\" hook in \"Sauce Demo Test\"",
              "timedOut": false,
              "duration": 5065,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`Ini udah beres ya jalanin testnya:)`)\nawait driver.sleep(5000);\nawait driver.quit();",
              "err": {},
              "uuid": "3f5cb451-90a6-488f-989d-3b7954f3a268",
              "parentUUID": "88c9ff88-3fe5-4c0f-99e2-0a2a2f26ac57",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Validasi Berhasil Visit SauceDemo & Validasi Berhasil Login",
              "fullTitle": "Sauce Demo Test Validasi Berhasil Visit SauceDemo & Validasi Berhasil Login",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Validasi Tittle\nconst title = await driver.getTitle();\nassert.strictEqual(title, 'Swag Labs');\n//Inputs untuk Login\nlet inputUsername = await driver.findElement(By.css('[data-test=\"username\"]'));\nlet inputPassword = await driver.findElement(By.xpath('//*[@data-test=\"password\"]'));\nlet buttonlogin = await driver.findElement(By.className('submit-button btn_action'));\nawait inputUsername.sendKeys('standard_user');\nawait inputPassword.sendKeys('secret_sauce');\nawait buttonlogin.click();\n//Validasi Berhasil Login\nlet buttonCart = await driver.wait(\n    until.elementLocated(By.xpath('//*[@data-test=\"shopping-cart-link\"]')),\n    5000 \n);\nawait buttonCart.isDisplayed();\n//Validasi Teks Logo\nlet textAppLogo = await driver.findElement(By.className('app_logo'))\nlet logotext = await textAppLogo.getText()\nassert.strictEqual(logotext,'Swag Labs')\n// await driver.sleep(3000);\n// await driver.quit();",
              "err": {},
              "uuid": "a988a8d2-a771-4ced-a0ed-6d5b0946e7a8",
              "parentUUID": "88c9ff88-3fe5-4c0f-99e2-0a2a2f26ac57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sorting Z to A",
              "fullTitle": "Sauce Demo Test Sorting Z to A",
              "timedOut": false,
              "duration": 8174,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Pilih dropdown dan pilih \"Name (Z to A)\"\nconst sortDropdown = await driver.findElement(By.className('product_sort_container'));\n// await sortDropdown.sendKeys('Name (Z to A)');\nawait sortDropdown.findElement(By.css('option[value=\"za\"]')).click();\n\n// Tunggu hasil sorting tampil\nawait driver.sleep(3000);\n// Ambil semua nama produk\nconst productElements = await driver.findElements(By.className('inventory_item_name'));\nconst productNames = [];\nfor (let el of productElements) {\n    const name = await el.getText();\n    productNames.push(name);\n}\n// Bandingkan urutan Z to A\nconst expectedSorted = [...productNames].sort().reverse();\nassert.deepStrictEqual(productNames, expectedSorted, 'Produk tidak terurut Z ke A');\n\n\nawait driver.sleep(5000);\n// await driver.quit();",
              "err": {},
              "uuid": "3d46cb55-cf55-4863-b706-7205fa86220e",
              "parentUUID": "88c9ff88-3fe5-4c0f-99e2-0a2a2f26ac57",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Sorting Harga dari Rendah ke Tinggi",
              "fullTitle": "Sauce Demo Test Sorting Harga dari Rendah ke Tinggi",
              "timedOut": false,
              "duration": 1091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Pilih dropdown dan pilih \"Price (low to high)\"\nconst sortDropdown = await driver.findElement(By.className('product_sort_container'));\n// await sortDropdown.sendKeys('Price (low to high)');\nawait sortDropdown.findElement(By.css('option[value=\"lohi\"]')).click();\n\n// Tunggu hasil sorting tampil\nawait driver.sleep(1000);\n// Ambil semua elemen harga produk\nconst priceElements = await driver.findElements(By.className('inventory_item_price'));\nconst priceValues = [];\nfor (let el of priceElements) {\n    const text = await el.getText(); // Contoh: \"$7.99\"\n    const price = parseFloat(text.replace('$', '')); //melakukan konversi ke number\n    priceValues.push(price);\n}\n// Bandingkan apakah sudah terurut dari rendah ke tinggi\nconst expectedSortedPrices = [...priceValues].sort((a, b) => a - b);\nassert.deepStrictEqual(priceValues, expectedSortedPrices, 'Harga tidak terurut dari rendah ke tinggi');\n// await driver.sleep(5000);\n// await driver.quit();",
              "err": {},
              "uuid": "19b3da20-ff0d-484c-9868-a9091a12b0f8",
              "parentUUID": "88c9ff88-3fe5-4c0f-99e2-0a2a2f26ac57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a988a8d2-a771-4ced-a0ed-6d5b0946e7a8",
            "3d46cb55-cf55-4863-b706-7205fa86220e",
            "19b3da20-ff0d-484c-9868-a9091a12b0f8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9669,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}